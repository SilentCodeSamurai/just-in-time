/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardTodoImport } from './routes/dashboard/todo'
import { Route as DashboardGroupImport } from './routes/dashboard/group'
import { Route as DashboardCategoryImport } from './routes/dashboard/category'
import { Route as AuthSignUpImport } from './routes/_auth/sign-up'
import { Route as AuthSignInImport } from './routes/_auth/sign-in'

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardTodoRoute = DashboardTodoImport.update({
  id: '/todo',
  path: '/todo',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardGroupRoute = DashboardGroupImport.update({
  id: '/group',
  path: '/group',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCategoryRoute = DashboardCategoryImport.update({
  id: '/category',
  path: '/category',
  getParentRoute: () => DashboardRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof AuthImport
    }
    '/dashboard/category': {
      id: '/dashboard/category'
      path: '/category'
      fullPath: '/dashboard/category'
      preLoaderRoute: typeof DashboardCategoryImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/group': {
      id: '/dashboard/group'
      path: '/group'
      fullPath: '/dashboard/group'
      preLoaderRoute: typeof DashboardGroupImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/todo': {
      id: '/dashboard/todo'
      path: '/todo'
      fullPath: '/dashboard/todo'
      preLoaderRoute: typeof DashboardTodoImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface DashboardRouteChildren {
  DashboardCategoryRoute: typeof DashboardCategoryRoute
  DashboardGroupRoute: typeof DashboardGroupRoute
  DashboardTodoRoute: typeof DashboardTodoRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardCategoryRoute: DashboardCategoryRoute,
  DashboardGroupRoute: DashboardGroupRoute,
  DashboardTodoRoute: DashboardTodoRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRouteWithChildren
  '/logout': typeof LogoutRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/dashboard/category': typeof DashboardCategoryRoute
  '/dashboard/group': typeof DashboardGroupRoute
  '/dashboard/todo': typeof DashboardTodoRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/logout': typeof LogoutRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/dashboard/category': typeof DashboardCategoryRoute
  '/dashboard/group': typeof DashboardGroupRoute
  '/dashboard/todo': typeof DashboardTodoRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRouteWithChildren
  '/logout': typeof LogoutRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/dashboard/category': typeof DashboardCategoryRoute
  '/dashboard/group': typeof DashboardGroupRoute
  '/dashboard/todo': typeof DashboardTodoRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dashboard'
    | '/logout'
    | '/sign-in'
    | '/sign-up'
    | '/dashboard/category'
    | '/dashboard/group'
    | '/dashboard/todo'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/logout'
    | '/sign-in'
    | '/sign-up'
    | '/dashboard/category'
    | '/dashboard/group'
    | '/dashboard/todo'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/dashboard'
    | '/logout'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/dashboard/category'
    | '/dashboard/group'
    | '/dashboard/todo'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
  LogoutRoute: typeof LogoutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
  LogoutRoute: LogoutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/dashboard",
        "/logout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/sign-in",
        "/_auth/sign-up"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/category",
        "/dashboard/group",
        "/dashboard/todo",
        "/dashboard/"
      ]
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/_auth/sign-in": {
      "filePath": "_auth/sign-in.tsx",
      "parent": "/_auth"
    },
    "/_auth/sign-up": {
      "filePath": "_auth/sign-up.tsx",
      "parent": "/_auth"
    },
    "/dashboard/category": {
      "filePath": "dashboard/category.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/group": {
      "filePath": "dashboard/group.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/todo": {
      "filePath": "dashboard/todo.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
