// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Todo {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  completed   Boolean    @default(false)
  completedAt DateTime?
  dueDate     DateTime?
  priority    Int        @default(2)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  groupId     String?
  group       TodoGroup? @relation(fields: [groupId], references: [id])
  categoryId  String?
  category    Category?  @relation(fields: [categoryId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  tags        Tag[]
  subtasks    Subtask[]
}

model TodoGroup {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  todos       Todo[]
  user        User     @relation(fields: [userId], references: [id])
}

model Category {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  todos       Todo[]
  user        User     @relation(fields: [userId], references: [id])
}

model Tag {
  id        String   @id @default(cuid())
  userId    String
  name      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  todos     Todo[]
  user      User     @relation(fields: [userId], references: [id])
}

model Subtask {
  id        String   @id @default(cuid())
  userId    String
  title     String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  todoId    String
  todo      Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Todo      Todo[]
  TodoGroup TodoGroup[]
  Category  Category[]
  Tag       Tag[]
  Subtask   Subtask[]
}
